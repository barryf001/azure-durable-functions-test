name: .NET Core
on:
  push:
    #branches:
    #  - '!master'
  pull_request:
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: TestLib
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/barryf001/
  GITHUB_USER: barryf001
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  # NUGET_FEED: https://api.nuget.org/v3/index.json
  # NUGET_KEY: ${{ secrets.NUGET_KEY }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Display variables
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event_name }}
          echo ${{ github.ref }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: |
          git tag --list
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Install NPM
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
      # - name: Test
      #   run: dotnet test -c Release test/${{ env.TEST_PROJECT_NAME }}
      - name: Pack
        run: dotnet pack -v normal -c Release --no-restore -p:PackageVersion=$GITHUB_RUN_ID src/$PROJECT_NAME/$PROJECT_NAME.csproj
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
  # prerelease:
  #   needs: build
  #   if: github.ref == 'refs/heads/develop'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: nupkg
  #     - name: Push to GitHub Feed
  #       run: |
  #         for f in ./nupkg/*.nupkg
  #         do
  #           curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
  #         done
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: |
          git tag --list
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Derive Version
        run: |
          LAST_TAGGED_VERSION=`git tag --list --sort=-committerdate 'v*' | head -1 | sed -Ee 's/v//g'`
          NEW_PATCH_VERSION=`expr $(echo $LAST_TAGGED_VERSION | cut -d '.' -f 3 ) + 1`
          NEW_VERSION=`echo $LAST_TAGGED_VERSION | sed -Ee "s/[0-9]+$/$NEW_PATCH_VERSION/g"`
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Prepare Release Note
        run: |          
          NOTE=`echo -e "## $NEW_VERSION\n- $(git log -n 1 --format="%s (%h) (%an)" | sed -Ee 's/ \(#[0-9+]\)//g')"`
          echo $NOTE >> /tmp/release_note.md
          cat RELEASE_NOTES.md >> /tmp/release_note.md
          mv /tmp/release_note.md RELEASE_NOTES.md
          echo $NOTE >> /tmp/note.md
      - name: Commit Release
        run: |
          git config --global user.name "aqovia-build"
          git config --global user.email aqovia-build@github.no-reply.com
          TAG_NAME=v${{ env.NEW_VERSION }}
          echo $TAG_NAME
          git commit -am "Release commit ${{ env.NEW_VERSION }}"
          git tag $TAG_NAME
          git push -f
          git push -f origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Create a GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body_path: /tmp/note.md
          prerelease: false
      - name: Create Release NuGet package
        run: |
          source /tmp/build_vars.sh
          dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=${{ env.NEW_VERSION }} -o nupkg src/$PROJECT_NAME/$PROJECT_NAME.*proj
      - name: Push to GitHub Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source https://nuget.pkg.github.com/barryf001/index.json --api-key ${GITHUB_TOKEN}

      # - name: Push to NuGet Feed
      #   run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY